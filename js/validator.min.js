/*!
 * Validator v0.9.0 for Bootstrap 3, by @1000hz
 * Copyright 2017 Cina Saffary
 * Licensed under http://opensource.org/licenses/MIT
 *
 * https://github.com/1000hz/bootstrap-validator
 */

+ function(a) {
    "use strict";

    function b(b) {
        return this.each(function() {
            var d = a(this),
                e = a.extend({}, c.DEFAULTS, d.data(), "object" == typeof b && b),
                f = d.data("bs.validator");
            (f || "destroy" != b) && (f || d.data("bs.validator", f = new c(this, e)), "string" == typeof b && f[b]())
        })
    }
    var c = function(b, d) {
        this.options = d, this.validators = a.extend({}, c.VALIDATORS, d.custom), this.$element = a(b), this.$element.attr("novalidate", !0), this.toggleSubmit(), this.$element.on("input.bs.validator change.bs.validator focusout.bs.validator", a.proxy(this.onInput, this)), this.$element.on("submit.bs.validator", a.proxy(this.onSubmit, this)), this.$element.find("[data-match]").each(function() {
            var b = a(this),
                c = b.data("match");
            a(c).on("input.bs.validator", function(a) {
                b.val() && b.trigger("input.bs.validator")
            })
        })
    };
    c.INPUT_SELECTOR = ':input:not([type="submit"], button, [data-validate="false"]):enabled:visible,:input[data-validate="true"]', c.FOCUS_OFFSET = 20, c.DEFAULTS = {
        delay: 500,
        html: !1,
        disable: !0,
        focus: !0,
        custom: {},
        errors: {
            match: "Does not match",
            minlength: "Not long enough"
        },
        feedback: {
            success: "glyphicon-ok",
            error: "glyphicon-remove"
        }
    }, c.VALIDATORS = {
        "native": function(a) {
            var b = a[0];
            return b.checkValidity ? !b.checkValidity() && !b.validity.valid && (b.validationMessage || "error!") : void 0
        },
        match: function(b) {
            var d = b.data("match");
            return b.val() !== a(d).val() && c.DEFAULTS.errors.match
        },
        minlength: function(a) {
            var b = a.data("minlength");
            return a.val().length < b && c.DEFAULTS.errors.minlength
        }
    }, c.prototype.onInput = function(b) {
        var d = this,
            e = a(b.target),
            f = "focusout" !== b.type;
        e.is(c.INPUT_SELECTOR) && this.validateInput(e, f).done(function() {
            d.toggleSubmit()
        })
    }, c.prototype.validateInput = function(b, c) {
        var d = b.data("bs.validator.errors");
        b.is('[type="radio"]') && (b = this.$element.find('input[name="' + b.attr("name") + '"]'));
        var e = a.Event("validate.bs.validator", {
            relatedTarget: b[0]
        });
        if (this.$element.trigger(e), !e.isDefaultPrevented()) {
            var f = this;
            return this.runValidators(b).done(function(g) {
                b.data("bs.validator.errors", g), g.length ? c ? f.defer(b, f.showErrors) : f.showErrors(b) : f.clearErrors(b), d && g.toString() === d.toString() || (e = g.length ? a.Event("invalid.bs.validator", {
                    relatedTarget: b[0],
                    detail: g
                }) : a.Event("valid.bs.validator", {
                    relatedTarget: b[0],
                    detail: d
                }), f.$element.trigger(e)), f.$element.trigger(a.Event("validated.bs.validator", {
                    relatedTarget: b[0]
                }))
            })
        }
    }, c.prototype.runValidators = function(b) {
        function c(a) {
            return b.data(a + "-error")
        }

        function d() {
            var a = b[0].validity;
            return a.typeMismatch ? b.data("type-error") : a.patternMismatch ? b.data("pattern-error") : a.stepMismatch ? b.data("step-error") : a.rangeOverflow ? b.data("max-error") : a.rangeUnderflow ? b.data("min-error") : a.valueMissing ? b.data("required-error") : null
        }

        function e() {
            return b.data("error")
        }

        function f(a) {
            return c(a) || d() || e()
        }
        var g = [],
            h = a.Deferred();
        return b.data("bs.validator.deferred") && b.data("bs.validator.deferred").reject(), b.data("bs.validator.deferred", h), a.each(this.validators, a.proxy(function(a, c) {
            var d = null;
            (b.data(a) || "native" == a) && (d = c.call(this, b)) && (d = f(a) || d, !~g.indexOf(d) && g.push(d))
        }, this)), !g.length && b.val() && b.data("remote") ? this.defer(b, function() {
            var c = {};
            c[b.attr("name")] = b.val(), a.get(b.data("remote"), c).fail(function(a, b, c) {
                g.push(f("remote") || c)
            }).always(function() {
                h.resolve(g)
            })
        }) : h.resolve(g), h.promise()
    }, c.prototype.validate = function(b) {
        var d = this;
        return b || (b = this.$element.find(c.INPUT_SELECTOR)), a.when(b.map(function(b) {
            return d.validateInput(a(this), !1)
        })).then(function() {
            d.toggleSubmit(b), d.focusError()
        }), this
    }, c.prototype.focusError = function() {
        if (this.options.focus) {
            var a = this.$element.find(".has-error :input:first");
            0 !== a.length && a.focus()
        }
    }, c.prototype.showErrors = function(b) {
        var c = this.options.html ? "html" : "text",
            d = b.data("bs.validator.errors"),
            e = b.closest(".form-group"),
            f = e.find(".help-block.with-errors"),
            g = e.find(".form-control-feedback");
        d.length && (d = a("<ul/>").addClass("list-unstyled").append(a.map(d, function(b) {
            return a("<li/>")[c](b)
        })), void 0 === f.data("bs.validator.originalContent") && f.data("bs.validator.originalContent", f.html()), f.empty().append(d), e.addClass("has-error has-danger"), e.hasClass("has-feedback") && g.removeClass(this.options.feedback.success) && g.addClass(this.options.feedback.error) && e.removeClass("has-success"))
    }, c.prototype.clearErrors = function(a) {
        var b = a.closest(".form-group"),
            c = b.find(".help-block.with-errors"),
            d = b.find(".form-control-feedback");
        c.html(c.data("bs.validator.originalContent")), b.removeClass("has-error has-danger"), b.hasClass("has-feedback") && d.removeClass(this.options.feedback.error) && a.val() && d.addClass(this.options.feedback.success) && b.addClass("has-success")
    }, c.prototype.hasErrors = function(b) {
        function c() {
            return !!(a(this).data("bs.validator.errors") || []).length
        }
        return !!b.filter(c).length
    }, c.prototype.isIncomplete = function(b) {
        function c() {
            return "checkbox" === this.type ? !this.checked : "radio" === this.type ? !a(this.form.elements).filter('[name="' + this.name + '"]:checked').length : "select-multiple" === this.type ? !(a(this).val() || []).length : "" === a.trim(this.value)
        }
        return !!b.filter("[required]").filter(c).length
    }, c.prototype.onSubmit = function(a) {
        var b = this.$element.find(c.INPUT_SELECTOR);
        this.validate(b), (this.isIncomplete(b) || this.hasErrors(b)) && a.preventDefault()
    }, c.prototype.toggleSubmit = function(b) {
        if (this.options.disable) {
            b || (b = this.$element.find(c.INPUT_SELECTOR));
            var d = a('button[type="submit"], input[type="submit"]').filter('[form="' + this.$element.attr("id") + '"]').add(this.$element.find('input[type="submit"], button[type="submit"]'));
            d.toggleClass("disabled", this.isIncomplete(b) || this.hasErrors(b))
        }
    }, c.prototype.defer = function(b, c) {
        return c = a.proxy(c, this, b), this.options.delay ? (window.clearTimeout(b.data("bs.validator.timeout")), void b.data("bs.validator.timeout", window.setTimeout(c, this.options.delay))) : c()
    }, c.prototype.destroy = function() {
        return this.$element.removeAttr("novalidate").removeData("bs.validator").off(".bs.validator").find(".form-control-feedback").removeClass([this.options.feedback.error, this.options.feedback.success].join(" ")), this.$element.find(c.INPUT_SELECTOR).off(".bs.validator").removeData(["bs.validator.errors", "bs.validator.deferred"]).each(function() {
            var b = a(this),
                c = b.data("bs.validator.timeout");
            window.clearTimeout(c) && b.removeData("bs.validator.timeout")
        }), this.$element.find(".help-block.with-errors").each(function() {
            var b = a(this),
                c = b.data("bs.validator.originalContent");
            b.removeData("bs.validator.originalContent").html(c)
        }), this.$element.find('input[type="submit"], button[type="submit"]').removeClass("disabled"), this.$element.find(".has-error, .has-danger").removeClass("has-error has-danger"), this
    };
    var d = a.fn.validator;
    a.fn.validator = b, a.fn.validator.Constructor = c, a.fn.validator.noConflict = function() {
        return a.fn.validator = d, this
    }, a(window).on("load", function() {
        a('form[data-toggle="validator"]').each(function() {
            var c = a(this);
            b.call(c, c.data())
        })
    })
}(jQuery);